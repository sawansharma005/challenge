#Scheduling
#Implement canary deployment by running two instances of nginx marked as version=v1 and version=v2 so that the load is balanced at 75%-25% ratio.

solution:

#Create deployment manifests
kubectl create deployment v1-app --image=nginx --replicas 3 --dry-run=client -o yaml > qa22v1.yaml
kubectl create deployment v2-app --image=httpd --replicas 1 --dry-run=client -o yaml > qa22v2.yaml

#Add a common label of deptype: canary to both of these manifest files for the pod template section
#edit qa22v1.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: v1-app
  name: v1-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: v1-app
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: v1-app
        deptype: canary
    spec:
      containers:
      - image: nginx
        name: nginx
        resources: {}
status: {}

#qa22v2
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: v2-app
  name: v2-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: v2-app
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: v2-app
        deptype: canary
    spec:
      containers:
      - image: httpd
        name: httpd
        resources: {}
status: {}


#Create deployment
kubectl apply -f qa22v1.yaml
kubectl apply -f qa22v2.yaml

#Create Canary Service
apiVersion: v1
kind: Service
metadata:
 name: canary-deployment
spec:
 ports:
 - name: http
   port: 80
   targetPort: 80
 selector:
   deptype: canary

kubectl apply -f canary-svc.yaml
