Enterprise Corp has a legacy application that was built by the team which no longer exists.

All the members of the team have left the organization. The legacy application only works on the port of 9080. The client does not want to always include port 9080 in their request.

They want that the application should be accessible via port 80. Create an ambassador container based on HAProxy which can handle the scenario. You don't have to learn about HAProxy. All the configuration files are provided.


Create a pod named kplabs-ambassador-pod from the legacy application image. The image is mykplabs/kubernetes:nginx

Create configmap called as kplabs-ambassador-config which has the following data:

    global
        daemon
        maxconn 256
 
    defaults
        mode http
        timeout connect 5000ms
        timeout client 50000ms
        timeout server 50000ms
 
    listen http-in
        bind *:80
        server server1 127.0.0.1:9080 maxconn 32


Create an ambassador container named haproxy-container from the image of haproxy:1.7

Expose the port 80 from Haproxy container.

Mount the configmap to the haproxy in such a way that HAProxy config is available at the following file:

/usr/local/etc/haproxy/haproxy.cfg

Create a Busybox pod from following pod definition:

apiVersion: v1
kind: Pod
metadata:
  name: busybox-curl
spec:
  containers:
  - name: curl-container
    image: busybox
    command: ['sh', '-c', 'while true; do sleep 3600; done']


Verify if you can perform CURL from busybox pod towards the ambassador pod on port 80.

Solution:

#create configmap
kubectl create configmap ambassador-config --from-file ./haproxy.cfg

#Create Ambassador pod
apiVersion: v1
kind: Pod
metadata:
  name: ambassador-pod
spec:
  containers:
  - name: first-container
    image: nginx
  - name: haproxy-container
    image: haproxy:1.7
    ports:
       - containerPort: 80
    volumeMounts:
     - name: config-volume
       mountPath: /usr/local/etc/haproxy/haproxy.cfg
  volumes:
    - name: config-volume
      configMap:
        name: ambassador-config

#Create busybox pod for validation
cat << | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: busybox-curl
spec:
  containers:
  - name: curl-container
    image: yauritux/busybox-curl
    command: ['sh', '-c', 'while true; do sleep 3600; done']
EOF

#connect to busybox pod 
kubectl exec -it busybox-curl sh

curl [IP-OF-AMBSSADOR-POD]